{
    "sourceFile": "EXAMEN.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1745915746020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745915760741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-# Proyecto de Gestión de Préstamos de Libros\n+# Exane de Gestión de Préstamos de Libros\n \n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El proyecto se implementa en Java con clases de servicio que interactúan con la base de datos a través de sentencias SQL para realizar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n \n ## Descripción General\n"
                },
                {
                    "date": 1745915788560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-# Exane de Gestión de Préstamos de Libros\n+# Exane de Gestión de Préstamos \n \n-Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El proyecto se implementa en Java con clases de servicio que interactúan con la base de datos a través de sentencias SQL para realizar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n+Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes.  operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n \n ## Descripción General\n \n El sistema tiene las siguientes entidades:\n"
                },
                {
                    "date": 1745915802200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n # Exane de Gestión de Préstamos \n \n-Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes.  operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n+Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n \n ## Descripción General\n \n El sistema tiene las siguientes entidades:\n"
                },
                {
                    "date": 1745915814935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n # Exane de Gestión de Préstamos \n \n-Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n+Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n \n El sistema tiene las siguientes entidades:\n"
                },
                {
                    "date": 1745915977270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,11 @@\n - **LibroService**: Gestiona la creación, lectura, actualización y eliminación de libros.\n - **UsuarioService**: Gestiona la creación, lectura, actualización y eliminación de usuarios.\n - **PrestamoService**: Gestiona la creación, lectura, actualización y eliminación de préstamos.\n \n+\n+\n+\n ## Métodos Lógicos en `PrestamoService`\n \n En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n"
                },
                {
                    "date": 1745915994899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,104 @@\n - **UsuarioService**: Gestiona la creación, lectura, actualización y eliminación de usuarios.\n - **PrestamoService**: Gestiona la creación, lectura, actualización y eliminación de préstamos.\n \n \n+## 1. **`AutorService`**\n \n+La clase `AutorService` gestiona las operaciones relacionadas con la entidad `Autor` en la base de datos.\n \n-## Métodos Lógicos en `PrestamoService`\n+### Métodos:\n \n+- **`crearAutor(Autor autor)`**:\n+  - **Descripción**: Inserta un nuevo autor en la base de datos.\n+  - **Parámetros**: Un objeto `Autor` con la información del autor.\n+  - **Retorno**: `true` si la inserción fue exitosa, de lo contrario, `false`.\n+  \n+- **`obtenerTodosAutores()`**:\n+  - **Descripción**: Obtiene todos los autores registrados en la base de datos.\n+  - **Retorno**: Una lista de objetos `Autor`.\n+\n+- **`obtenerAutorPorDni(String dni)`**:\n+  - **Descripción**: Obtiene un autor de la base de datos a partir del DNI proporcionado.\n+  - **Parámetros**: El DNI del autor a buscar.\n+  - **Retorno**: Un objeto `Autor` si existe el autor con ese DNI, o `null` si no se encuentra.\n+\n+- **`actualizarAutor(Autor autor)`**:\n+  - **Descripción**: Actualiza la información de un autor existente en la base de datos.\n+  - **Parámetros**: Un objeto `Autor` con la nueva información.\n+  - **Retorno**: `true` si la actualización fue exitosa, de lo contrario, `false`.\n+\n+- **`eliminarAutor(String dni)`**:\n+  - **Descripción**: Elimina un autor de la base de datos si no está asociado con ningún libro.\n+  - **Parámetros**: El DNI del autor a eliminar.\n+  - **Retorno**: `true` si el autor fue eliminado correctamente, de lo contrario, `false`.\n+\n+---\n+\n+## 2. **`LibroService`**\n+\n+La clase `LibroService` gestiona las operaciones relacionadas con la entidad `Libro` en la base de datos.\n+\n+### Métodos:\n+\n+- **`crearLibro(Libro libro)`**:\n+  - **Descripción**: Inserta un nuevo libro en la base de datos.\n+  - **Parámetros**: Un objeto `Libro` con la información del libro.\n+  - **Retorno**: `true` si la inserción fue exitosa, de lo contrario, `false`.\n+\n+- **`obtenerTodosLibros()`**:\n+  - **Descripción**: Obtiene todos los libros registrados en la base de datos.\n+  - **Retorno**: Una lista de objetos `Libro`.\n+\n+- **`obtenerLibroPorId(String idLibro)`**:\n+  - **Descripción**: Obtiene un libro de la base de datos a partir del ID proporcionado.\n+  - **Parámetros**: El ID del libro a buscar.\n+  - **Retorno**: Un objeto `Libro` si existe el libro con ese ID, o `null` si no se encuentra.\n+\n+- **`actualizarLibro(Libro libro)`**:\n+  - **Descripción**: Actualiza la información de un libro existente en la base de datos.\n+  - **Parámetros**: Un objeto `Libro` con la nueva información.\n+  - **Retorno**: `true` si la actualización fue exitosa, de lo contrario, `false`.\n+\n+- **`eliminarLibro(String idLibro)`**:\n+  - **Descripción**: Elimina un libro de la base de datos.\n+  - **Parámetros**: El ID del libro a eliminar.\n+  - **Retorno**: `true` si el libro fue eliminado correctamente, de lo contrario, `false`.\n+\n+---\n+\n+## 3. **`UsuarioService`**\n+\n+La clase `UsuarioService` gestiona las operaciones relacionadas con la entidad `Usuario` en la base de datos.\n+\n+### Métodos:\n+\n+- **`crearUsuario(Usuario usuario)`**:\n+  - **Descripción**: Inserta un nuevo usuario en la base de datos.\n+  - **Parámetros**: Un objeto `Usuario` con la información del usuario.\n+  - **Retorno**: `true` si la inserción fue exitosa, de lo contrario, `false`.\n+\n+- **`obtenerTodosUsuarios()`**:\n+  - **Descripción**: Obtiene todos los usuarios registrados en la base de datos.\n+  - **Retorno**: Una lista de objetos `Usuario`.\n+\n+- **`obtenerUsuarioPorId(String idUsuario)`**:\n+  - **Descripción**: Obtiene un usuario de la base de datos a partir del ID proporcionado.\n+  - **Parámetros**: El ID del usuario a buscar.\n+  - **Retorno**: Un objeto `Usuario` si existe el usuario con ese ID, o `null` si no se encuentra.\n+\n+- **`actualizarUsuario(Usuario usuario)`**:\n+  - **Descripción**: Actualiza la información de un usuario existente en la base de datos.\n+  - **Parámetros**: Un objeto `Usuario` con la nueva información.\n+  - **Retorno**: `true` si la actualización fue exitosa, de lo contrario, `false`.\n+\n+- **`eliminarUsuario(String idUsuario)`**:\n+  - **Descripción**: Elimina un usuario de la base de datos.\n+  - **Parámetros**: El ID del usuario a eliminar.\n+  - **Retorno**: `true` si el usuario fue eliminado correctamente, de lo contrario, `false`.\n+\n+## 3. Métodos Lógicos en `PrestamoService`\n+\n En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n ### 1. **Obtener Préstamos Vencidos (`obtenerPrestamosVencidos`)**\n \n"
                },
                {
                    "date": 1745916009948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,12 +112,14 @@\n   - **Descripción**: Elimina un usuario de la base de datos.\n   - **Parámetros**: El ID del usuario a eliminar.\n   - **Retorno**: `true` si el usuario fue eliminado correctamente, de lo contrario, `false`.\n \n-## 3. Métodos Lógicos en `PrestamoService`\n+## 4. Métodos Lógicos en `PrestamoService`\n \n En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n+### Métodos:\n+\n ### 1. **Obtener Préstamos Vencidos (`obtenerPrestamosVencidos`)**\n \n Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n"
                },
                {
                    "date": 1745916020301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n ### Métodos:\n \n-### 1. **Obtener Préstamos Vencidos (`obtenerPrestamosVencidos`)**\n+- **``obtenerPrestamosVencidos`)**\n \n Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n #### Parámetro:\n"
                },
                {
                    "date": 1745916026295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n ### Métodos:\n \n-- **``obtenerPrestamosVencidos`)**\n+- **`obtenerPrestamosVencidos`**\n \n Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n #### Parámetro:\n"
                },
                {
                    "date": 1745916043742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n \n ---\n \n-### 2. **Obtener Préstamos Activos (`obtenerPrestamosActivos`)**\n+- **`obtenerPrestamosActivos`)**\n \n Este método devuelve todos los préstamos que están activos en el sistema, es decir, aquellos cuyo libro aún no ha sido devuelto (su fecha de devolución no ha llegado o no existe).\n \n #### Parámetro:\n"
                },
                {
                    "date": 1745916053832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n \n ---\n \n-- **`obtenerPrestamosActivos`)**\n+- **`obtenerPrestamosActivos`**\n \n Este método devuelve todos los préstamos que están activos en el sistema, es decir, aquellos cuyo libro aún no ha sido devuelto (su fecha de devolución no ha llegado o no existe).\n \n #### Parámetro:\n@@ -142,9 +142,9 @@\n Devuelve una lista de objetos `Prestamo` donde la `fechaDevolucion` es posterior a la fecha actual o aún no se ha establecido.\n \n ---\n \n-### 3. **Obtener Préstamos por Usuario (`obtenerPrestamosPorUsuario`)**\n+- **`obtenerPrestamosPorUsuario`)**\n \n Este método recibe un ID de usuario y devuelve todos los préstamos asociados a ese usuario.\n \n #### Parámetro:\n"
                },
                {
                    "date": 1745916077820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n ### Métodos:\n \n - **`obtenerPrestamosVencidos`**\n \n-Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n+    - Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n #### Parámetro:\n - **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n \n@@ -142,9 +142,9 @@\n Devuelve una lista de objetos `Prestamo` donde la `fechaDevolucion` es posterior a la fecha actual o aún no se ha establecido.\n \n ---\n \n-- **`obtenerPrestamosPorUsuario`)**\n+- **`obtenerPrestamosPorUsuario`\n \n Este método recibe un ID de usuario y devuelve todos los préstamos asociados a ese usuario.\n \n #### Parámetro:\n"
                },
                {
                    "date": 1745916084304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n - **`obtenerPrestamosVencidos`**\n \n     - Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n-#### Parámetro:\n+    Parámetro:\n - **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n \n #### Descripción:\n Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n"
                },
                {
                    "date": 1745916092610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,10 +122,10 @@\n - **`obtenerPrestamosVencidos`**\n \n     - Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n \n-    Parámetro:\n-- **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n+    - Parámetro:\n+        - **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n \n #### Descripción:\n Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n \n"
                },
                {
                    "date": 1745916099121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n \n     - Parámetro:\n         - **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n \n-#### Descripción:\n+    Descripción:\n Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n \n ---\n \n"
                },
                {
                    "date": 1745916219341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,50 +112,10 @@\n   - **Descripción**: Elimina un usuario de la base de datos.\n   - **Parámetros**: El ID del usuario a eliminar.\n   - **Retorno**: `true` si el usuario fue eliminado correctamente, de lo contrario, `false`.\n \n-## 4. Métodos Lógicos en `PrestamoService`\n \n-En la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n \n-### Métodos:\n-\n-- **`obtenerPrestamosVencidos`**\n-\n-    - Este método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n-\n-    - Parámetro:\n-        - **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n-\n-    Descripción:\n-Devuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n-\n----\n-\n-- **`obtenerPrestamosActivos`**\n-\n-Este método devuelve todos los préstamos que están activos en el sistema, es decir, aquellos cuyo libro aún no ha sido devuelto (su fecha de devolución no ha llegado o no existe).\n-\n-#### Parámetro:\n-- **Ninguno**.\n-\n-#### Descripción:\n-Devuelve una lista de objetos `Prestamo` donde la `fechaDevolucion` es posterior a la fecha actual o aún no se ha establecido.\n-\n----\n-\n-- **`obtenerPrestamosPorUsuario`\n-\n-Este método recibe un ID de usuario y devuelve todos los préstamos asociados a ese usuario.\n-\n-#### Parámetro:\n-- **idUsuario**: El ID del usuario para el cual se desean obtener los préstamos.\n-\n-#### Descripción:\n-Devuelve una lista de objetos `Prestamo` que están asociados con el usuario identificado por el `idUsuario`.\n-\n----\n-\n ## Flujo de Ejecución en la Clase `Main`\n \n En la clase `Main`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n \n"
                },
                {
                    "date": 1745916302081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-# Exane de Gestión de Préstamos \n+# Examen de Gestión de Préstamos \n \n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n@@ -112,10 +112,53 @@\n   - **Descripción**: Elimina un usuario de la base de datos.\n   - **Parámetros**: El ID del usuario a eliminar.\n   - **Retorno**: `true` si el usuario fue eliminado correctamente, de lo contrario, `false`.\n \n+## 4. **`PrestamoService`**\n \n+La clase `PrestamoService` gestiona las operaciones relacionadas con la entidad `Prestamo` en la base de datos. Hereda de `DBConnection` y utiliza sentencias SQL para llevar a cabo las operaciones de inserción, actualización, consulta y eliminación de préstamos.\n \n+### Métodos:\n+\n+- **`crearPrestamo(Prestamo prestamo)`**:\n+  - **Descripción**: Inserta un nuevo préstamo en la base de datos.\n+  - **Parámetros**: Un objeto `Prestamo` con la información del préstamo.\n+  - **Retorno**: `true` si la inserción fue exitosa; `false` si hay campos nulos o ocurre un error.\n+\n+- **`obtenerTodosPrestamos()`**:\n+  - **Descripción**: Recupera todos los registros de préstamos almacenados en la base de datos.\n+  - **Retorno**: Una lista de objetos `Prestamo`.\n+\n+- **`obtenerPrestamoPorId(String id)`**:\n+  - **Descripción**: Busca un préstamo específico por su ID.\n+  - **Parámetros**: ID del préstamo a buscar.\n+  - **Retorno**: Un objeto `Prestamo` si se encuentra; de lo contrario, `null`.\n+\n+- **`actualizarPrestamo(Prestamo prestamo)`**:\n+  - **Descripción**: Actualiza los datos de un préstamo existente.\n+  - **Parámetros**: Un objeto `Prestamo` con la información actualizada.\n+  - **Retorno**: `true` si la actualización fue exitosa; `false` si hay campos nulos o ocurre un error.\n+\n+- **`eliminarPrestamo(String id)`**:\n+  - **Descripción**: Elimina un préstamo específico de la base de datos.\n+  - **Parámetros**: ID del préstamo a eliminar.\n+  - **Retorno**: `true` si la eliminación fue exitosa; de lo contrario, `false`.\n+\n+- **`obtenerPrestamosVencidos(Date fechaLimite)`**:\n+  - **Descripción**: Obtiene todos los préstamos cuya fecha de devolución es anterior a una fecha límite especificada.\n+  - **Parámetros**: Objeto `Date` que representa la fecha límite.\n+  - **Retorno**: Lista de objetos `Prestamo` que están vencidos.\n+\n+- **`obtenerPrestamosPorUsuario(String idUsuario)`**:\n+  - **Descripción**: Filtra y retorna los préstamos asociados a un usuario específico.\n+  - **Parámetros**: ID del usuario.\n+  - **Retorno**: Lista de préstamos correspondientes al usuario.\n+\n+- **`obtenerPrestamosActivos()`**:\n+  - **Descripción**: Recupera los préstamos cuya fecha de devolución es posterior a la fecha actual (es decir, aún activos).\n+  - **Retorno**: Lista de préstamos activos.\n+\n+\n ## Flujo de Ejecución en la Clase `Main`\n \n En la clase `Main`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n \n"
                },
                {
                    "date": 1745916310075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n-# Examen de Gestión de Préstamos \n+# Examen de Gestión de Préstamos (BD) \n \n+https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\n+\n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n \n"
                },
                {
                    "date": 1745916332231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n # Examen de Gestión de Préstamos (BD) \n \n+<img src=\"ruta/o/url/de/imagen.jpg\" alt=\"Texto alternativo\" width=\"300\" height=\"200\">\n https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\n \n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n"
                },
                {
                    "date": 1745916338691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # Examen de Gestión de Préstamos (BD) \n \n-<img src=\"ruta/o/url/de/imagen.jpg\" alt=\"Texto alternativo\" width=\"300\" height=\"200\">\n-https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\n+<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"300\" height=\"200\">\n \n+\n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n \n"
                },
                {
                    "date": 1745916346750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n # Examen de Gestión de Préstamos (BD) \n \n-<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"300\" height=\"200\">\n+<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"00\" >\n \n \n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n"
                },
                {
                    "date": 1745916353091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n # Examen de Gestión de Préstamos (BD) \n \n-<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"00\" >\n+<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"350\" >\n \n \n Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n"
                },
                {
                    "date": 1745916363703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n <img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"350\" >\n \n \n-Este proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n+Este ejer está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n \n El sistema tiene las siguientes entidades:\n"
                },
                {
                    "date": 1745916385385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n <img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"350\" >\n \n \n-Este ejer está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Leer, Actualizar, Eliminar, etc de las entidades).\n+Este ejercicio está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El ejercicio consiste en implementar distintas operaciones en CRUD (Crear, Consultar, Actualizar, Eliminar, etc de las entidades).\n \n ## Descripción General\n \n El sistema tiene las siguientes entidades:\n"
                },
                {
                    "date": 1745916817241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,7 +237,9 @@\n - **Resultado Esperado**:\n \n ---\n \n+\n+\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745916829051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n - **Resultado Esperado**:\n \n ---\n \n+-- Calidad de la soluci\n \n-\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745916834698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n - **Resultado Esperado**:\n \n ---\n \n--- Calidad de la soluci\n+ Calidad de la solución\n \n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745916841048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n - **Resultado Esperado**:\n \n ---\n \n- Calidad de la solución\n+## Calidad de la solución\n \n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745916846096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,7 +239,10 @@\n ---\n \n ## Calidad de la solución\n \n+\n+---\n+\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745916857487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,8 +240,10 @@\n \n ## Calidad de la solución\n \n \n+A través de los test se verificar\n+\n ---\n \n ## Conclusión\n \n"
                },
                {
                    "date": 1745916865523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n \n ## Calidad de la solución\n \n \n-A través de los test se verificar\n+A través de los test se verificará la calidad de la soluci\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916882604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,10 +240,12 @@\n \n ## Calidad de la solución\n \n \n-A través de los test se verificará la calidad de la soluci\n+A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n+\n+\n ---\n \n ## Conclusión\n \n"
                },
                {
                    "date": 1745916889461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,10 +242,11 @@\n \n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n+```code\n+``\n \n-\n ---\n \n ## Conclusión\n \n"
                },
                {
                    "date": 1745916895559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,18 @@\n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n ```code\n-``\n+[WARNING] Rule violated for class es.ies.puerto.PruebaApp: complexity total count is 26, but expected maximum is 25\n+[WARNING] Rule violated for class es.ies.puerto.modelo.db.services.PrestamoService: complexity total count is 26, but expected maximum is 25\n+[INFO] ------------------------------------------------------------------------\n+[INFO] BUILD FAILURE\n+[INFO] ------------------------------------------------------------------------\n+[INFO] Total time:  4.280 s\n+[INFO] Finished at: 2025-04-29T09:52:55+01:00\n+[INFO] ------------------------------------------------------------------------\n+[ERROR] Failed to execute goal org.jacoco:jacoco-maven-plugin:0.8.4:check (check-unit-test) on project examen-bd-jdbc: Coverage checks have not been met. See log for details. -> [Help 1]\n+```\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916903549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,11 +249,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] BUILD FAILURE\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n-[INFO] Finished at: 2025-04-29T09:52:55+01:00\n-[INFO] ------------------------------------------------------------------------\n-[ERROR] Failed to execute goal org.jacoco:jacoco-maven-plugin:0.8.4:check (check-unit-test) on project examen-bd-jdbc: Coverage checks have not been met. See log for details. -> [Help 1]\n+\n ```\n \n ---\n \n"
                },
                {
                    "date": 1745916909203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,8 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] BUILD FAILURE\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n-\n ```\n \n ---\n \n"
                },
                {
                    "date": 1745916924350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,8 +251,10 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n+Significa que los test pasan pero la soluci\n+\n ---\n \n ## Conclusión\n \n"
                },
                {
                    "date": 1745916943324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-Significa que los test pasan pero la soluci\n+Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916955961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase\n+Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métod\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916963557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métod\n+> Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916971342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero la solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero la **solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916983061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero la **solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la **solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745916990514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la **solución no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la SOLUCI no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917001472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la SOLUCI no tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la SOLUCIÓN**  tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917011813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la SOLUCIÓN**  tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917023282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los *métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917039734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los *métodos que forman la clase. Del mismo modo puede suceder con los métodos.\n+> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los *métodos que forman la clase*. Del mismo modo puede suceder con los métodos de forma independiente.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917053715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n [INFO] ------------------------------------------------------------------------\n [INFO] Total time:  4.280 s\n ```\n \n-> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los *métodos que forman la clase*. Del mismo modo puede suceder con los métodos de forma independiente.\n+> Significa que los test pasan pero **la SOLUCIÓN NO** tiene la calidad suficiente por los *métodos que forman la clase*. Lo mismo modo puede suceder con los métodos de forma independiente.\n \n ---\n \n ## Conclusión\n"
                },
                {
                    "date": 1745917117290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,5 +257,5 @@\n ---\n \n ## Conclusión\n \n-Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n+Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
                },
                {
                    "date": 1745917133474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,8 +239,9 @@\n ---\n \n ## Calidad de la solución\n \n+https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n ```code\n"
                },
                {
                    "date": 1745917162955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n   - **Descripción**: Recupera los préstamos cuya fecha de devolución es posterior a la fecha actual (es decir, aún activos).\n   - **Retorno**: Lista de préstamos activos.\n \n \n-## Flujo de Ejecución en la Clase `Main`\n+## Flujo de Ejecución en la Clase `App`\n \n En la clase `Main`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n \n 1. **Crear Autor, Libro, Usuario y Préstamo**: Se crean instancias de las entidades y se insertan en la base de datos.\n"
                },
                {
                    "date": 1745917173098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,11 +160,11 @@\n   - **Descripción**: Recupera los préstamos cuya fecha de devolución es posterior a la fecha actual (es decir, aún activos).\n   - **Retorno**: Lista de préstamos activos.\n \n \n-## Flujo de Ejecución en la Clase `App`\n+## Flujo de Ejecución en la Clase `PruebaApp`\n \n-En la clase `Main`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n+En la clase `PruebaApp`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n \n 1. **Crear Autor, Libro, Usuario y Préstamo**: Se crean instancias de las entidades y se insertan en la base de datos.\n    \n    Ejemplo de datos creados:\n"
                },
                {
                    "date": 1745917179300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,8 +239,10 @@\n ---\n \n ## Calidad de la solución\n \n+<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"350\" >\n+\n https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n"
                },
                {
                    "date": 1745917186892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,12 +239,12 @@\n ---\n \n ## Calidad de la solución\n \n-<img src=\"https://www.brandeis.edu/global/student-insights/images/midterm-2.jpg\" alt=\"Texto alternativo\" width=\"350\" >\n+<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"350\" >\n \n-https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\n \n+\n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n \n ```code\n [WARNING] Rule violated for class es.ies.puerto.PruebaApp: complexity total count is 26, but expected maximum is 25\n"
                },
                {
                    "date": 1745917480229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,4 +261,6 @@\n \n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n+\n+\n"
                },
                {
                    "date": 1745917485666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,5 +262,7 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n+## Rúbrica\n \n+\n"
                },
                {
                    "date": 1745917499635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,5 +264,65 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## Rúbrica\n \n+# 📊 Rúbrica de Evaluación por Clases (0-10 puntos)\n \n+## 🧱 Estructura General\n+\n+- **Clases evaluadas**: `UsuarioService`, `AutorService`, `LibroService`, `PrestamoService`\n+- **Puntuación máxima por clase**: 2.5\n+- **Total**: 10 puntos\n+- **Aspectos evaluados**:\n+  - Métodos CRUD\n+  - Consultas específicas (si aplica)\n+  - Calidad del código\n+  - Documentación JavaDoc y comentarios\n+\n+---\n+\n+## 🔹 `UsuarioService` (0 - 2.5 pts)\n+\n+| Criterio                                  | Descripción esperada                                                                 | Puntos |\n+|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n+| Métodos CRUD completos                    | `crearUsuario`, `obtenerUsuarioPorId`, `obtenerTodosUsuarios`, `actualizarUsuario`, `eliminarUsuario` | 1.0    |\n+| Manejo de conexión y excepciones         | Uso correcto de try-catch y cierre de conexiones                                     | 0.5    |\n+| Calidad del código                        | Estructura limpia, nombres claros, sin duplicidad                                   | 0.5    |\n+| Documentación                             | Comentarios claros o JavaDoc en los métodos                                          | 0.5    |\n+\n+---\n+\n+## 🔹 `AutorService` (0 - 2.5 pts)\n+\n+| Criterio                                  | Descripción esperada                                                                 | Puntos |\n+|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n+| Métodos CRUD completos                    | `crearAutor`, `obtenerAutorPorDni`, `obtenerTodosAutores`, `actualizarAutor`, `eliminarAutor` | 1.0    |\n+| Restricción en eliminación               | No permite eliminar si hay libros relacionados (`NOT EXISTS` en SQL)                | 0.5    |\n+| Calidad del código                        | Uso adecuado de patrones, claridad y coherencia                                     | 0.5    |\n+| Documentación                             | JavaDoc o comentarios en métodos clave                                              | 0.5    |\n+\n+---\n+\n+## 🔹 `LibroService` (0 - 2.5 pts)\n+\n+| Criterio                                  | Descripción esperada                                                                 | Puntos |\n+|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n+| Métodos CRUD completos                    | `crearLibro`, `obtenerLibroPorId`, `obtenerTodosLibros`, `actualizarLibro`, `eliminarLibro` | 1.0    |\n+| Referencia válida a autor                 | Uso correcto de clave foránea (`autor_dni` referenciado)                            | 0.5    |\n+| Calidad del código                        | Código claro, organizado y sin redundancias                                          | 0.5    |\n+| Documentación                             | JavaDoc o comentarios explicativos                                                   | 0.5    |\n+\n+---\n+\n+## 🔹 `PrestamoService` (0 - 2.5 pts)\n+\n+| Criterio                                  | Descripción esperada                                                                 | Puntos |\n+|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n+| Métodos CRUD completos                    | `crearPrestamo`, `obtenerPrestamoPorId`, `obtenerTodosPrestamos`, `actualizarPrestamo`, `eliminarPrestamo` | 1.0    |\n+| Consultas específicas                     | `obtenerPrestamosVencidos`, `obtenerPrestamosPorUsuario`, `obtenerPrestamosActivos` | 0.5    |\n+| Validaciones lógicas                      | Comprobación de fechas, valores nulos y vencimientos                                | 0.5    |\n+| Documentación                             | Métodos documentados con JavaDoc o comentarios aclaratorios                          | 0.5    |\n+\n+---\n+\n+## ✅ Total: **/10 puntos**\n+\n"
                },
                {
                    "date": 1745917543744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,11 +264,9 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## Rúbrica\n \n-# 📊 Rúbrica de Evaluación por Clases (0-10 puntos)\n \n-## 🧱 Estructura General\n \n - **Clases evaluadas**: `UsuarioService`, `AutorService`, `LibroService`, `PrestamoService`\n - **Puntuación máxima por clase**: 2.5\n - **Total**: 10 puntos\n"
                },
                {
                    "date": 1745917549890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,11 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## Rúbrica\n \n+# 📊 Rúbrica de Evaluación por Clases (0-10 puntos)\n \n+## 🧱 Estructura General\n \n - **Clases evaluadas**: `UsuarioService`, `AutorService`, `LibroService`, `PrestamoService`\n - **Puntuación máxima por clase**: 2.5\n - **Total**: 10 puntos\n"
                },
                {
                    "date": 1745917560885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,14 +262,11 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-## Rúbrica\n+## 📊 Rúbrica\n \n-# 📊 Rúbrica de Evaluación por Clases (0-10 puntos)\n \n-## 🧱 Estructura General\n-\n - **Clases evaluadas**: `UsuarioService`, `AutorService`, `LibroService`, `PrestamoService`\n - **Puntuación máxima por clase**: 2.5\n - **Total**: 10 puntos\n - **Aspectos evaluados**:\n"
                },
                {
                    "date": 1745917685327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,4 +322,71 @@\n ---\n \n ## ✅ Total: **/10 puntos**\n \n+# 📊 Rúbrica de Evaluación por Clases (Desglose por Método) – Total: 10 puntos\n+\n+## 🧱 Criterios Generales\n+- Cada método correctamente implementado aporta **0,2 puntos**.\n+- Se evalúa:\n+  - Presencia del método\n+  - Funcionalidad correcta\n+  - Manejo de excepciones y conexión\n+  - Uso de estructuras y convenciones adecuadas\n+  - Documentación mínima (JavaDoc o comentario)\n+\n+---\n+\n+## 🔹 UsuarioService (1.0 punto)\n+\n+| Método                        | Descripción                                         | Puntos |\n+|------------------------------|-----------------------------------------------------|--------|\n+| `crearUsuario`               | Inserta un nuevo usuario en la base de datos        | 0.2    |\n+| `obtenerUsuarioPorId`        | Consulta un usuario por su ID                       | 0.2    |\n+| `obtenerTodosUsuarios`       | Devuelve todos los usuarios                         | 0.2    |\n+| `actualizarUsuario`          | Modifica un usuario existente                       | 0.2    |\n+| `eliminarUsuario`            | Elimina un usuario por su ID                        | 0.2    |\n+\n+---\n+\n+## 🔹 AutorService (1.0 punto)\n+\n+| Método                        | Descripción                                         | Puntos |\n+|------------------------------|-----------------------------------------------------|--------|\n+| `crearAutor`                 | Inserta un nuevo autor                              | 0.2    |\n+| `obtenerAutorPorDni`         | Consulta un autor por DNI                           | 0.2    |\n+| `obtenerTodosAutores`        | Lista todos los autores                             | 0.2    |\n+| `actualizarAutor`            | Actualiza los datos de un autor                     | 0.2    |\n+| `eliminarAutor`              | Elimina un autor (solo si no tiene libros asociados)| 0.2    |\n+\n+---\n+\n+## 🔹 LibroService (1.0 punto)\n+\n+| Método                        | Descripción                                         | Puntos |\n+|------------------------------|-----------------------------------------------------|--------|\n+| `crearLibro`                 | Inserta un nuevo libro                              | 0.2    |\n+| `obtenerLibroPorId`          | Consulta un libro por ID                            | 0.2    |\n+| `obtenerTodosLibros`         | Lista todos los libros                              | 0.2    |\n+| `actualizarLibro`            | Actualiza los datos de un libro                     | 0.2    |\n+| `eliminarLibro`              | Elimina un libro por ID                             | 0.2    |\n+\n+---\n+\n+## 🔹 PrestamoService (2.0 puntos)\n+\n+| Método                             | Descripción                                                              | Puntos |\n+|-----------------------------------|--------------------------------------------------------------------------|--------|\n+| `crearPrestamo`                   | Inserta un préstamo nuevo                                                | 0.2    |\n+| `obtenerPrestamoPorId`            | Consulta un préstamo por su ID                                          | 0.2    |\n+| `obtenerTodosPrestamos`           | Lista todos los préstamos                                                | 0.2    |\n+| `actualizarPrestamo`              | Actualiza un préstamo existente                                          | 0.2    |\n+| `eliminarPrestamo`                | Elimina un préstamo                                                      | 0.2    |\n+| `obtenerPrestamosVencidos`        | Devuelve préstamos cuya devolución es anterior a una fecha límite       | 0.2    |\n+| `obtenerPrestamosPorUsuario`      | Devuelve préstamos filtrados por ID de usuario                          | 0.2    |\n+| `obtenerPrestamosActivos`         | Devuelve préstamos cuya devolución es posterior a la fecha actual       | 0.2    |\n+| Validación de fechas (crear/actualizar) | Controla que no se inserten préstamos con fechas nulas o inválidas | 0.2    |\n+| Calidad de código y documentación | Buenas prácticas, uso de JavaDoc/comentarios                            | 0.2    |\n+\n+---\n+\n+## ✅ Total: **10 puntos**\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745917699124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,68 +262,8 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-## 📊 Rúbrica\n-\n-\n-- **Clases evaluadas**: `UsuarioService`, `AutorService`, `LibroService`, `PrestamoService`\n-- **Puntuación máxima por clase**: 2.5\n-- **Total**: 10 puntos\n-- **Aspectos evaluados**:\n-  - Métodos CRUD\n-  - Consultas específicas (si aplica)\n-  - Calidad del código\n-  - Documentación JavaDoc y comentarios\n-\n----\n-\n-## 🔹 `UsuarioService` (0 - 2.5 pts)\n-\n-| Criterio                                  | Descripción esperada                                                                 | Puntos |\n-|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n-| Métodos CRUD completos                    | `crearUsuario`, `obtenerUsuarioPorId`, `obtenerTodosUsuarios`, `actualizarUsuario`, `eliminarUsuario` | 1.0    |\n-| Manejo de conexión y excepciones         | Uso correcto de try-catch y cierre de conexiones                                     | 0.5    |\n-| Calidad del código                        | Estructura limpia, nombres claros, sin duplicidad                                   | 0.5    |\n-| Documentación                             | Comentarios claros o JavaDoc en los métodos                                          | 0.5    |\n-\n----\n-\n-## 🔹 `AutorService` (0 - 2.5 pts)\n-\n-| Criterio                                  | Descripción esperada                                                                 | Puntos |\n-|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n-| Métodos CRUD completos                    | `crearAutor`, `obtenerAutorPorDni`, `obtenerTodosAutores`, `actualizarAutor`, `eliminarAutor` | 1.0    |\n-| Restricción en eliminación               | No permite eliminar si hay libros relacionados (`NOT EXISTS` en SQL)                | 0.5    |\n-| Calidad del código                        | Uso adecuado de patrones, claridad y coherencia                                     | 0.5    |\n-| Documentación                             | JavaDoc o comentarios en métodos clave                                              | 0.5    |\n-\n----\n-\n-## 🔹 `LibroService` (0 - 2.5 pts)\n-\n-| Criterio                                  | Descripción esperada                                                                 | Puntos |\n-|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n-| Métodos CRUD completos                    | `crearLibro`, `obtenerLibroPorId`, `obtenerTodosLibros`, `actualizarLibro`, `eliminarLibro` | 1.0    |\n-| Referencia válida a autor                 | Uso correcto de clave foránea (`autor_dni` referenciado)                            | 0.5    |\n-| Calidad del código                        | Código claro, organizado y sin redundancias                                          | 0.5    |\n-| Documentación                             | JavaDoc o comentarios explicativos                                                   | 0.5    |\n-\n----\n-\n-## 🔹 `PrestamoService` (0 - 2.5 pts)\n-\n-| Criterio                                  | Descripción esperada                                                                 | Puntos |\n-|------------------------------------------|---------------------------------------------------------------------------------------|--------|\n-| Métodos CRUD completos                    | `crearPrestamo`, `obtenerPrestamoPorId`, `obtenerTodosPrestamos`, `actualizarPrestamo`, `eliminarPrestamo` | 1.0    |\n-| Consultas específicas                     | `obtenerPrestamosVencidos`, `obtenerPrestamosPorUsuario`, `obtenerPrestamosActivos` | 0.5    |\n-| Validaciones lógicas                      | Comprobación de fechas, valores nulos y vencimientos                                | 0.5    |\n-| Documentación                             | Métodos documentados con JavaDoc o comentarios aclaratorios                          | 0.5    |\n-\n----\n-\n-## ✅ Total: **/10 puntos**\n-\n # 📊 Rúbrica de Evaluación por Clases (Desglose por Método) – Total: 10 puntos\n \n ## 🧱 Criterios Generales\n - Cada método correctamente implementado aporta **0,2 puntos**.\n"
                },
                {
                    "date": 1745917714047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-# 📊 Rúbrica de Evaluación por Clases (Desglose por Método) – Total: 10 puntos\n+## 📊 Rúbrica de Evaluación por Clases (Desglose por Método) – Total: 10 puntos\n \n ## 🧱 Criterios Generales\n - Cada método correctamente implementado aporta **0,2 puntos**.\n - Se evalúa:\n"
                },
                {
                    "date": 1745917720917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-## 📊 Rúbrica de Evaluación por Clases (Desglose por Método) – Total: 10 puntos\n+## 📊 Rúbrica de Evaluación\n \n ## 🧱 Criterios Generales\n - Cada método correctamente implementado aporta **0,2 puntos**.\n - Se evalúa:\n"
                },
                {
                    "date": 1745917729734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## 📊 Rúbrica de Evaluación\n \n-## 🧱 Criterios Generales\n+### 🧱 Criterios Generales\n - Cada método correctamente implementado aporta **0,2 puntos**.\n - Se evalúa:\n   - Presencia del método\n   - Funcionalidad correcta\n@@ -275,9 +275,9 @@\n   - Documentación mínima (JavaDoc o comentario)\n \n ---\n \n-## 🔹 UsuarioService (1.0 punto)\n+### 🔹 UsuarioService (1.0 punto)\n \n | Método                        | Descripción                                         | Puntos |\n |------------------------------|-----------------------------------------------------|--------|\n | `crearUsuario`               | Inserta un nuevo usuario en la base de datos        | 0.2    |\n"
                },
                {
                    "date": 1745917738857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n | `eliminarUsuario`            | Elimina un usuario por su ID                        | 0.2    |\n \n ---\n \n-## 🔹 AutorService (1.0 punto)\n+### 🔹 AutorService (1.0 punto)\n \n | Método                        | Descripción                                         | Puntos |\n |------------------------------|-----------------------------------------------------|--------|\n | `crearAutor`                 | Inserta un nuevo autor                              | 0.2    |\n@@ -299,9 +299,9 @@\n | `eliminarAutor`              | Elimina un autor (solo si no tiene libros asociados)| 0.2    |\n \n ---\n \n-## 🔹 LibroService (1.0 punto)\n+### 🔹 LibroService (1.0 punto)\n \n | Método                        | Descripción                                         | Puntos |\n |------------------------------|-----------------------------------------------------|--------|\n | `crearLibro`                 | Inserta un nuevo libro                              | 0.2    |\n"
                },
                {
                    "date": 1745917993421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,71 +262,78 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-## 📊 Rúbrica de Evaluación\n+# 📊 Rúbrica de Evaluación por Clase y Método – Total: 10 puntos\n \n-### 🧱 Criterios Generales\n-- Cada método correctamente implementado aporta **0,2 puntos**.\n-- Se evalúa:\n-  - Presencia del método\n-  - Funcionalidad correcta\n-  - Manejo de excepciones y conexión\n-  - Uso de estructuras y convenciones adecuadas\n-  - Documentación mínima (JavaDoc o comentario)\n+> Evaluación basada en la implementación, lógica, calidad del código y documentación técnica.\n \n ---\n \n-### 🔹 UsuarioService (1.0 punto)\n+## 🔹 Conexión a Base de Datos (0.75 puntos)\n \n-| Método                        | Descripción                                         | Puntos |\n-|------------------------------|-----------------------------------------------------|--------|\n-| `crearUsuario`               | Inserta un nuevo usuario en la base de datos        | 0.2    |\n-| `obtenerUsuarioPorId`        | Consulta un usuario por su ID                       | 0.2    |\n-| `obtenerTodosUsuarios`       | Devuelve todos los usuarios                         | 0.2    |\n-| `actualizarUsuario`          | Modifica un usuario existente                       | 0.2    |\n-| `eliminarUsuario`            | Elimina un usuario por su ID                        | 0.2    |\n+| Elemento                                | Descripción                                                                      | Puntos |\n+|-----------------------------------------|----------------------------------------------------------------------------------|--------|\n+| Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n+| Uso correcto en clases hijas (`getConnection`) | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n+| Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n-### 🔹 AutorService (1.0 punto)\n+## 🔹 UsuarioService (1.25 puntos)\n \n-| Método                        | Descripción                                         | Puntos |\n-|------------------------------|-----------------------------------------------------|--------|\n-| `crearAutor`                 | Inserta un nuevo autor                              | 0.2    |\n-| `obtenerAutorPorDni`         | Consulta un autor por DNI                           | 0.2    |\n-| `obtenerTodosAutores`        | Lista todos los autores                             | 0.2    |\n-| `actualizarAutor`            | Actualiza los datos de un autor                     | 0.2    |\n-| `eliminarAutor`              | Elimina un autor (solo si no tiene libros asociados)| 0.2    |\n+| Elemento                | Descripción                              | Puntos |\n+|------------------------|------------------------------------------|--------|\n+| `crearUsuario`         | Inserta un nuevo usuario                 | 0.2    |\n+| `obtenerUsuarioPorId`  | Consulta un usuario por ID               | 0.2    |\n+| `obtenerTodosUsuarios` | Lista todos los usuarios                 | 0.2    |\n+| `actualizarUsuario`    | Modifica un usuario existente            | 0.2    |\n+| `eliminarUsuario`      | Elimina un usuario                       | 0.2    |\n+| Calidad + Documentación| Buenas prácticas + comentarios           | 0.25   |\n \n ---\n \n-### 🔹 LibroService (1.0 punto)\n+## 🔹 AutorService (1.25 puntos)\n \n-| Método                        | Descripción                                         | Puntos |\n-|------------------------------|-----------------------------------------------------|--------|\n-| `crearLibro`                 | Inserta un nuevo libro                              | 0.2    |\n-| `obtenerLibroPorId`          | Consulta un libro por ID                            | 0.2    |\n-| `obtenerTodosLibros`         | Lista todos los libros                              | 0.2    |\n-| `actualizarLibro`            | Actualiza los datos de un libro                     | 0.2    |\n-| `eliminarLibro`              | Elimina un libro por ID                             | 0.2    |\n+| Elemento               | Descripción                               | Puntos |\n+|-----------------------|-------------------------------------------|--------|\n+| `crearAutor`          | Inserta un nuevo autor                    | 0.2    |\n\\ No newline at end of file\n+| `obtenerAutorPorDni`  | Consulta un autor por DNI                 | 0.2    |\n+| `obtenerTodosAutores` | Lista todos los autores                   | 0.2    |\n+| `actualizarAutor`     | Modifica un autor existente               | 0.2    |\n+| `eliminarAutor`       | Elimina un autor si no tiene libros       | 0.2    |\n+| Calidad + Documentación| Claridad y consistencia                  | 0.25   |\n \n ---\n \n-## 🔹 PrestamoService (2.0 puntos)\n+## 🔹 LibroService (1.25 puntos)\n \n-| Método                             | Descripción                                                              | Puntos |\n-|-----------------------------------|--------------------------------------------------------------------------|--------|\n-| `crearPrestamo`                   | Inserta un préstamo nuevo                                                | 0.2    |\n-| `obtenerPrestamoPorId`            | Consulta un préstamo por su ID                                          | 0.2    |\n-| `obtenerTodosPrestamos`           | Lista todos los préstamos                                                | 0.2    |\n-| `actualizarPrestamo`              | Actualiza un préstamo existente                                          | 0.2    |\n-| `eliminarPrestamo`                | Elimina un préstamo                                                      | 0.2    |\n-| `obtenerPrestamosVencidos`        | Devuelve préstamos cuya devolución es anterior a una fecha límite       | 0.2    |\n-| `obtenerPrestamosPorUsuario`      | Devuelve préstamos filtrados por ID de usuario                          | 0.2    |\n-| `obtenerPrestamosActivos`         | Devuelve préstamos cuya devolución es posterior a la fecha actual       | 0.2    |\n-| Validación de fechas (crear/actualizar) | Controla que no se inserten préstamos con fechas nulas o inválidas | 0.2    |\n-| Calidad de código y documentación | Buenas prácticas, uso de JavaDoc/comentarios                            | 0.2    |\n+| Elemento               | Descripción                               | Puntos |\n+|-----------------------|-------------------------------------------|--------|\n+| `crearLibro`          | Inserta un nuevo libro                    | 0.2    |\n+| `obtenerLibroPorId`   | Consulta un libro por ID                  | 0.2    |\n+| `obtenerTodosLibros`  | Lista todos los libros                    | 0.2    |\n+| `actualizarLibro`     | Modifica un libro existente               | 0.2    |\n+| `eliminarLibro`       | Elimina un libro                          | 0.2    |\n+| Calidad + Documentación| Estilo y comentarios técnicos            | 0.25   |\n \n ---\n \n-## ✅ Total: **10 puntos**\n+## 🔹 PrestamoService (5.5 puntos)\n+\n+| Elemento                          | Descripción                                                         | Puntos |\n+|----------------------------------|---------------------------------------------------------------------|--------|\n+| `crearPrestamo`                  | Inserta un nuevo préstamo                                           | 0.2    |\n+| `obtenerPrestamoPorId`           | Consulta un préstamo por ID                                        | 0.2    |\n+| `obtenerTodosPrestamos`          | Lista todos los préstamos                                          | 0.2    |\n+| `actualizarPrestamo`             | Modifica préstamo existente                                        | 0.2    |\n+| `eliminarPrestamo`               | Elimina un préstamo                                                | 0.2    |\n+| `obtenerPrestamosVencidos`       | Devuelve préstamos vencidos (lógica propia)                        | 0.6    |\n+| `obtenerPrestamosPorUsuario`     | Filtra préstamos por usuario (lógica propia)                       | 0.6    |\n+| `obtenerPrestamosActivos`        | Devuelve préstamos activos (lógica propia)                         | 0.6    |\n+| Validaciones de fechas           | Validación de `null`, formato y consistencia en las fechas         | 0.3    |\n+| Calidad general del código       | Excepciones, SQL seguro, limpieza de lógica                        | 0.45   |\n+| Documentación clara y completa   | JavaDoc, claridad de propósito, estructura                         | 0.45   |\n+\n+---\n+\n+## ✅ Total: **10 puntos**\n"
                },
                {
                    "date": 1745918008548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n-| Uso correcto en clases hijas (`getConnection`) | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n+| Uso correcto en clases hijas | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n@@ -335,5 +335,5 @@\n | Documentación clara y completa   | JavaDoc, claridad de propósito, estructura                         | 0.45   |\n \n ---\n \n-## ✅ Total: **10 puntos**\n\\ No newline at end of file\n+## ✅ Total: **10 puntos**\n"
                },
                {
                    "date": 1745918013853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n-| Uso correcto en clases hijas | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n+| Uso correcto en clases hijas, si fuera necesario | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n"
                },
                {
                    "date": 1745918025959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n-| Uso correcto en clases hijas, si fuera necesario | Abstracción y reutilización de la conexión a través de la clase `DBConnection` | 0.25   |\n+| Uso correcto en clases hijas, si fuera necesario | Abstracción y reutilización  | 0.25   |\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n"
                },
                {
                    "date": 1745918037761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n-| Uso correcto en clases hijas, si fuera necesario | Abstracción y reutilización  | 0.25   |\n+| Uso correcto en clases hijas, si fuera necesario | CAbstracción y reutilización  | 0.25   |\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n"
                },
                {
                    "date": 1745918055376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n ## Conclusión\n \n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n-# 📊 Rúbrica de Evaluación por Clase y Método – Total: 10 puntos\n+## 📊 Rúbrica de Evaluación por Clase y Método – Total: 10 puntos\n \n > Evaluación basada en la implementación, lógica, calidad del código y documentación técnica.\n \n ---\n@@ -273,9 +273,9 @@\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n-| Uso correcto en clases hijas, si fuera necesario | CAbstracción y reutilización  | 0.25   |\n+| Uso correcto en clases hijas, si fuera necesario | Correcto uso de abstracción y reutilización  | 0.25   |\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n"
                },
                {
                    "date": 1745918060985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n > Evaluación basada en la implementación, lógica, calidad del código y documentación técnica.\n \n ---\n \n-## 🔹 Conexión a Base de Datos (0.75 puntos)\n+### 🔹 Conexión a Base de Datos (0.75 puntos)\n \n | Elemento                                | Descripción                                                                      | Puntos |\n |-----------------------------------------|----------------------------------------------------------------------------------|--------|\n | Lectura desde fichero `.properties`     | Implementación de lectura de propiedades (usuario, password, url, driver)       | 0.25   |\n@@ -278,9 +278,9 @@\n | Calidad y manejo de errores             | Control de excepciones, cierre de recursos, claridad en la implementación       | 0.25   |\n \n ---\n \n-## 🔹 UsuarioService (1.25 puntos)\n+### 🔹 UsuarioService (1.25 puntos)\n \n | Elemento                | Descripción                              | Puntos |\n |------------------------|------------------------------------------|--------|\n | `crearUsuario`         | Inserta un nuevo usuario                 | 0.2    |\n"
                },
                {
                    "date": 1745918067173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,9 +291,9 @@\n | Calidad + Documentación| Buenas prácticas + comentarios           | 0.25   |\n \n ---\n \n-## 🔹 AutorService (1.25 puntos)\n+### 🔹 AutorService (1.25 puntos)\n \n | Elemento               | Descripción                               | Puntos |\n |-----------------------|-------------------------------------------|--------|\n | `crearAutor`          | Inserta un nuevo autor                    | 0.2    |\n@@ -304,9 +304,9 @@\n | Calidad + Documentación| Claridad y consistencia                  | 0.25   |\n \n ---\n \n-## 🔹 LibroService (1.25 puntos)\n+### 🔹 LibroService (1.25 puntos)\n \n | Elemento               | Descripción                               | Puntos |\n |-----------------------|-------------------------------------------|--------|\n | `crearLibro`          | Inserta un nuevo libro                    | 0.2    |\n"
                },
                {
                    "date": 1745918072480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n | Calidad + Documentación| Estilo y comentarios técnicos            | 0.25   |\n \n ---\n \n-## 🔹 PrestamoService (5.5 puntos)\n+### 🔹 PrestamoService (5.5 puntos)\n \n | Elemento                          | Descripción                                                         | Puntos |\n |----------------------------------|---------------------------------------------------------------------|--------|\n | `crearPrestamo`                  | Inserta un nuevo préstamo                                           | 0.2    |\n@@ -335,5 +335,5 @@\n | Documentación clara y completa   | JavaDoc, claridad de propósito, estructura                         | 0.45   |\n \n ---\n \n-## ✅ Total: **10 puntos**\n+### ✅ Total: **10 puntos**\n"
                },
                {
                    "date": 1745918089332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,10 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## 📊 Rúbrica de Evaluación por Clase y Método – Total: 10 puntos\n \n+<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"350\" >\n+\n > Evaluación basada en la implementación, lógica, calidad del código y documentación técnica.\n \n ---\n \n"
                },
                {
                    "date": 1745918134482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,8 @@\n Este proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `PruebaApp`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n \n ## 📊 Rúbrica de Evaluación por Clase y Método – Total: 10 puntos\n \n-<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"350\" >\n \n > Evaluación basada en la implementación, lógica, calidad del código y documentación técnica.\n \n ---\n"
                },
                {
                    "date": 1745918146207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n ---\n \n ## Calidad de la solución\n \n-<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"350\" >\n+<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"3200\" >\n \n \n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n"
                },
                {
                    "date": 1745918151735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n ---\n \n ## Calidad de la solución\n \n-<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"3200\" >\n+<img src=\"https://w7.pngwing.com/pngs/995/92/png-transparent-exclamation-mark-interjection-warning-sign-red-exclamation-point-miscellaneous-angle-triangle.png\" alt=\"Texto alternativo\" width=\"100\" >\n \n \n \n A través de los test se verificará la calidad de la solución, teniendo en cuenta que si obtienes un mensaje similar al siguiente:\n"
                }
            ],
            "date": 1745915746020,
            "name": "Commit-0",
            "content": "# Proyecto de Gestión de Préstamos de Libros\n\nEste proyecto está diseñado para gestionar una base de datos de préstamos de libros, donde se realiza un seguimiento de autores, libros, usuarios y los préstamos correspondientes. El proyecto se implementa en Java con clases de servicio que interactúan con la base de datos a través de sentencias SQL para realizar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar).\n\n## Descripción General\n\nEl sistema tiene las siguientes entidades:\n\n1. **Autor**: Representa a los autores de los libros.\n2. **Libro**: Representa a los libros disponibles en el sistema.\n3. **Usuario**: Representa a los usuarios que pueden solicitar préstamos de libros.\n4. **Préstamo**: Representa los préstamos que los usuarios hacen de los libros.\n\nEl sistema debe ofrecer los siguientes servicios:\n\n- **AutorService**: Gestiona la creación, lectura, actualización y eliminación de autores.\n- **LibroService**: Gestiona la creación, lectura, actualización y eliminación de libros.\n- **UsuarioService**: Gestiona la creación, lectura, actualización y eliminación de usuarios.\n- **PrestamoService**: Gestiona la creación, lectura, actualización y eliminación de préstamos.\n\n## Métodos Lógicos en `PrestamoService`\n\nEn la clase `PrestamoService` se han implementado tres métodos lógicos, cada uno de los cuales realiza una acción importante para la gestión de los préstamos:\n\n### 1. **Obtener Préstamos Vencidos (`obtenerPrestamosVencidos`)**\n\nEste método recibe una fecha y devuelve todos los préstamos que tienen una fecha de devolución anterior a la fecha indicada.\n\n#### Parámetro:\n- **fecha**: Fecha límite para comprobar si los préstamos han vencido.\n\n#### Descripción:\nDevuelve una lista de objetos `Prestamo` cuya `fechaDevolucion` es anterior a la fecha proporcionada.\n\n---\n\n### 2. **Obtener Préstamos Activos (`obtenerPrestamosActivos`)**\n\nEste método devuelve todos los préstamos que están activos en el sistema, es decir, aquellos cuyo libro aún no ha sido devuelto (su fecha de devolución no ha llegado o no existe).\n\n#### Parámetro:\n- **Ninguno**.\n\n#### Descripción:\nDevuelve una lista de objetos `Prestamo` donde la `fechaDevolucion` es posterior a la fecha actual o aún no se ha establecido.\n\n---\n\n### 3. **Obtener Préstamos por Usuario (`obtenerPrestamosPorUsuario`)**\n\nEste método recibe un ID de usuario y devuelve todos los préstamos asociados a ese usuario.\n\n#### Parámetro:\n- **idUsuario**: El ID del usuario para el cual se desean obtener los préstamos.\n\n#### Descripción:\nDevuelve una lista de objetos `Prestamo` que están asociados con el usuario identificado por el `idUsuario`.\n\n---\n\n## Flujo de Ejecución en la Clase `Main`\n\nEn la clase `Main`, se realizan diversas pruebas para interactuar con los servicios y mostrar los resultados:\n\n1. **Crear Autor, Libro, Usuario y Préstamo**: Se crean instancias de las entidades y se insertan en la base de datos.\n   \n   Ejemplo de datos creados:\n   - Autor: \"Gabriel García Márquez\" (DNI `12345678A`).\n   - Libro: \"Cien años de soledad\" (ID `LIB-001`).\n   - Usuario: \"Juan Pérez\" (ID `USR001`).\n   - Préstamo: ID `PRE001` con libro `LIB-001` y usuario `USR001`.\n\n2. **Mostrar Todos los Registros**: El sistema muestra todos los autores, libros, usuarios y préstamos almacenados en la base de datos.\n\n3. **Ejecutar Métodos Lógicos**: Se ejecutan los métodos lógicos para mostrar los resultados específicos de los préstamos vencidos, activos y por usuario.\n\n---\n\n## Ejemplo de Ejecución y Respuestas Esperadas\n\n### Método `crearAutor()`\n\n- **Acción**: Crea un nuevo autor \"Gabriel García Márquez\".\n- **Resultado Esperado**: \n\n### Método `crearLibro()`\n\n- **Acción**: Crea un nuevo libro \"Cien años de soledad\".\n- **Resultado Esperado**:\n\n### Método `crearUsuario()`\n\n- **Acción**: Crea un nuevo usuario \"Juan Pérez\".\n- **Resultado Esperado**:\n\n### Método `crearPrestamo()`\n\n- **Acción**: Crea un préstamo para el libro \"Cien años de soledad\" por parte del usuario \"Juan Pérez\".\n- **Resultado Esperado**:\n\n### Método `mostrarAutores()`\n\n- **Acción**: Muestra todos los autores.\n- **Resultado Esperado**:\n\n### Método `mostrarLibros()`\n\n- **Acción**: Muestra todos los libros.\n- **Resultado Esperado**:\n\n### Método `mostrarUsuarios()`\n\n- **Acción**: Muestra todos los usuarios.\n- **Resultado Esperado**:\n\n### Método `mostrarPrestamos()`\n\n- **Acción**: Muestra todos los préstamos.\n- **Resultado Esperado**:\n\n### Método `prestamosPorUsuario(\"USR001\")`\n\n- **Acción**: Muestra todos los préstamos realizados por el usuario con ID `USR001`.\n- **Resultado Esperado**:\n\n### Método `prestamosVencidos(\"2024-04-01\")`\n\n- **Acción**: Muestra los préstamos vencidos antes de la fecha `2024-04-01`.\n- **Resultado Esperado**:\n\n### Método `prestamosActivos()`\n\n- **Acción**: Muestra todos los préstamos activos.\n- **Resultado Esperado**:\n\n---\n\n## Conclusión\n\nEste proyecto permite gestionar autores, libros, usuarios y préstamos a través de una base de datos. Los métodos lógicos proporcionan información sobre préstamos vencidos, activos y préstamos asociados a un usuario en particular. Al ejecutar la clase `Main`, se realiza la interacción con el sistema y se obtienen los resultados esperados en función de las operaciones realizadas.\n"
        }
    ]
}