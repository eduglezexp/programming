{
    "sourceFile": "src/test/java/es/ies/puerto/modelo/db/services/PrestamoServiceTest.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1745913373256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745913386962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,76 @@\n package es.ies.puerto.modelo.db.services;\n \n-public class PrestamoServiceTest {\n+import es.ies.puerto.modelo.db.entidades.Prestamo;\n+import org.junit.jupiter.api.*;\n \n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PrestamoServiceTest {\n+\n+    PrestamoService prestamoService = new PrestamoService();\n+\n+    Date getFecha(String fecha) {\n+        try {\n+            return new SimpleDateFormat(\"yyyy-MM-dd\").parse(fecha);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    void crearPrestamoTest() {\n+        Prestamo prestamo = new Prestamo(\"PRE001\", \"LIB-001\", \"USR001\", getFecha(\"2024-04-01\"), getFecha(\"2024-05-01\"));\n+        assertTrue(prestamoService.crearPrestamo(prestamo));\n+\n+        assertFalse(prestamoService.crearPrestamo(prestamo)); // Repetido\n+    }\n+\n+    @Test\n+    void obtenerTodosPrestamosTest() {\n+        int inicial = prestamoService.obtenerTodosPrestamos().size();\n+\n+        prestamoService.crearPrestamo(new Prestamo(\"PRE002\", \"LIB-002\", \"USR002\", getFecha(\"2024-03-01\"), getFecha(\"2024-03-30\")));\n+        prestamoService.crearPrestamo(new Prestamo(\"PRE003\", \"LIB-003\", \"USR003\", getFecha(\"2024-02-01\"), getFecha(\"2024-02-28\")));\n+\n+        List<Prestamo> prestamos = prestamoService.obtenerTodosPrestamos();\n+        assertEquals(inicial + 2, prestamos.size());\n+    }\n+\n+    @Test\n+    void obtenerPrestamoPorIdTest() {\n+        Prestamo esperado = new Prestamo(\"PRE004\", \"LIB-004\", \"USR004\", getFecha(\"2024-01-01\"), getFecha(\"2024-01-20\"));\n+        prestamoService.crearPrestamo(esperado);\n+\n+        Prestamo actual = prestamoService.obtenerPrestamoPorId(\"PRE004\");\n+        assertNotNull(actual);\n+        assertEquals(\"PRE004\", actual.getIdPrestamo());\n+\n+        assertNull(prestamoService.obtenerPrestamoPorId(\"NOEXISTE\"));\n+    }\n+\n+    @Test\n+    void actualizarPrestamoTest() {\n+        Prestamo prestamo = new Prestamo(\"PRE005\", \"LIB-005\", \"USR005\", getFecha(\"2024-01-01\"), getFecha(\"2024-01-15\"));\n+        prestamoService.crearPrestamo(prestamo);\n+\n+        prestamo.setLibroId(\"LIB-006\");\n+        prestamo.setFechaDevolucion(getFecha(\"2024-02-01\"));\n+        assertTrue(prestamoService.actualizarPrestamo(prestamo));\n+\n+        Prestamo actualizado = prestamoService.obtenerPrestamoPorId(\"PRE005\");\n+        assertEquals(\"LIB-006\", actualizado.getLibroId());\n+    }\n+\n+    @Test\n+    void eliminarPrestamoTest() {\n+        prestamoService.crearPrestamo(new Prestamo(\"PRE006\", \"LIB-001\", \"USR001\", getFecha(\"2024-04-15\"), getFecha(\"2024-04-30\")));\n+        assertTrue(prestamoService.eliminarPrestamo(\"PRE006\"));\n+        assertNull(prestamoService.obtenerPrestamoPorId(\"PRE006\"));\n+\n+        assertFalse(prestamoService.eliminarPrestamo(\"NOEXISTE\"));\n+    }\n }\n"
                },
                {
                    "date": 1745914073798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,11 @@\n \n import es.ies.puerto.modelo.db.entidades.Prestamo;\n import org.junit.jupiter.api.*;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -72,5 +74,52 @@\n         assertNull(prestamoService.obtenerPrestamoPorId(\"PRE006\"));\n \n         assertFalse(prestamoService.eliminarPrestamo(\"NOEXISTE\"));\n     }\n+\n+    @Test\n+void testObtenerPrestamosVencidos() throws ParseException {\n+    PrestamoService service = new PrestamoService();\n+    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+    service.crear(new Prestamo(\"PRE-100\", \"LIB-001\", \"USR-001\", sdf.parse(\"2023-01-01\"), sdf.parse(\"2023-01-15\")));\n+    service.crear(new Prestamo(\"PRE-101\", \"LIB-002\", \"USR-002\", sdf.parse(\"2023-01-05\"), sdf.parse(\"2025-01-15\")));\n+\n+    List<Prestamo> vencidos = service.obtenerPrestamosVencidos(sdf.parse(\"2024-01-01\"));\n+\n+    assertEquals(1, vencidos.size());\n+    assertEquals(\"PRE-100\", vencidos.get(0).getIdPrestamo());\n }\n+\n+@Test\n+void testObtenerPrestamosPorUsuario() throws ParseException {\n+    PrestamoService service = new PrestamoService();\n+    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+    service.crear(new Prestamo(\"PRE-102\", \"LIB-003\", \"USR-500\", sdf.parse(\"2024-04-01\"), sdf.parse(\"2024-04-10\")));\n+    service.crear(new Prestamo(\"PRE-103\", \"LIB-004\", \"USR-500\", sdf.parse(\"2024-04-02\"), sdf.parse(\"2024-04-15\")));\n+\n+    List<Prestamo> porUsuario = service.obtenerPrestamosPorUsuario(\"USR-500\");\n+\n+    assertEquals(2, porUsuario.size());\n+    assertTrue(porUsuario.stream().allMatch(p -> p.getUsuarioId().equals(\"USR-500\")));\n+}\n+\n+@Test\n+void testObtenerPrestamosActivos() throws ParseException {\n+    PrestamoService service = new PrestamoService();\n+    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date hoy = new Date();\n+\n+    // Uno vencido, uno activo\n+    service.crear(new Prestamo(\"PRE-104\", \"LIB-005\", \"USR-600\", sdf.parse(\"2024-04-01\"), sdf.parse(\"2024-04-15\")));\n+    Calendar futureDate = Calendar.getInstance();\n+    futureDate.add(Calendar.DATE, 10);\n+    service.crear(new Prestamo(\"PRE-105\", \"LIB-006\", \"USR-600\", sdf.parse(\"2024-04-20\"), futureDate.getTime()));\n+\n+    List<Prestamo> activos = service.obtenerPrestamosActivos();\n+\n+    assertEquals(1, activos.size());\n+    assertEquals(\"PRE-105\", activos.get(0).getIdPrestamo());\n+}\n+\n+}\n"
                },
                {
                    "date": 1745914081729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,9 @@\n \n import es.ies.puerto.modelo.db.entidades.Prestamo;\n import org.junit.jupiter.api.*;\n \n-import java.text.ParseException;\n import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -75,51 +73,6 @@\n \n         assertFalse(prestamoService.eliminarPrestamo(\"NOEXISTE\"));\n     }\n \n-    @Test\n-void testObtenerPrestamosVencidos() throws ParseException {\n-    PrestamoService service = new PrestamoService();\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\n-    service.crear(new Prestamo(\"PRE-100\", \"LIB-001\", \"USR-001\", sdf.parse(\"2023-01-01\"), sdf.parse(\"2023-01-15\")));\n-    service.crear(new Prestamo(\"PRE-101\", \"LIB-002\", \"USR-002\", sdf.parse(\"2023-01-05\"), sdf.parse(\"2025-01-15\")));\n-\n-    List<Prestamo> vencidos = service.obtenerPrestamosVencidos(sdf.parse(\"2024-01-01\"));\n-\n-    assertEquals(1, vencidos.size());\n-    assertEquals(\"PRE-100\", vencidos.get(0).getIdPrestamo());\n+    \n }\n-\n-@Test\n-void testObtenerPrestamosPorUsuario() throws ParseException {\n-    PrestamoService service = new PrestamoService();\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\n-    service.crear(new Prestamo(\"PRE-102\", \"LIB-003\", \"USR-500\", sdf.parse(\"2024-04-01\"), sdf.parse(\"2024-04-10\")));\n-    service.crear(new Prestamo(\"PRE-103\", \"LIB-004\", \"USR-500\", sdf.parse(\"2024-04-02\"), sdf.parse(\"2024-04-15\")));\n-\n-    List<Prestamo> porUsuario = service.obtenerPrestamosPorUsuario(\"USR-500\");\n-\n-    assertEquals(2, porUsuario.size());\n-    assertTrue(porUsuario.stream().allMatch(p -> p.getUsuarioId().equals(\"USR-500\")));\n-}\n-\n-@Test\n-void testObtenerPrestamosActivos() throws ParseException {\n-    PrestamoService service = new PrestamoService();\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-    Date hoy = new Date();\n-\n-    // Uno vencido, uno activo\n-    service.crear(new Prestamo(\"PRE-104\", \"LIB-005\", \"USR-600\", sdf.parse(\"2024-04-01\"), sdf.parse(\"2024-04-15\")));\n-    Calendar futureDate = Calendar.getInstance();\n-    futureDate.add(Calendar.DATE, 10);\n-    service.crear(new Prestamo(\"PRE-105\", \"LIB-006\", \"USR-600\", sdf.parse(\"2024-04-20\"), futureDate.getTime()));\n-\n-    List<Prestamo> activos = service.obtenerPrestamosActivos();\n-\n-    assertEquals(1, activos.size());\n-    assertEquals(\"PRE-105\", activos.get(0).getIdPrestamo());\n-}\n-\n-}\n"
                },
                {
                    "date": 1745914134970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import es.ies.puerto.modelo.db.entidades.Prestamo;\n import org.junit.jupiter.api.*;\n \n import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n import static org.junit.jupiter.api.Assertions.*;\n@@ -73,6 +74,41 @@\n \n         assertFalse(prestamoService.eliminarPrestamo(\"NOEXISTE\"));\n     }\n \n+    @Test\n+void obtenerPrestamosVencidosTest() {\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE007\", \"LIB-007\", \"USR007\", getFecha(\"2023-01-01\"), getFecha(\"2023-02-01\")));\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE008\", \"LIB-008\", \"USR007\", getFecha(\"2024-01-01\"), getFecha(\"2025-01-01\")));\n+\n+    List<Prestamo> vencidos = prestamoService.obtenerPrestamosVencidos(getFecha(\"2024-01-01\"));\n+    assertTrue(vencidos.stream().anyMatch(p -> p.getIdPrestamo().equals(\"PRE007\")));\n+    assertTrue(vencidos.stream().noneMatch(p -> p.getIdPrestamo().equals(\"PRE008\")));\n+}\n+\n+@Test\n+void obtenerPrestamosPorUsuarioTest() {\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE009\", \"LIB-009\", \"USR008\", getFecha(\"2024-04-01\"), getFecha(\"2024-04-20\")));\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE010\", \"LIB-010\", \"USR008\", getFecha(\"2024-04-02\"), getFecha(\"2024-04-25\")));\n+\n+    List<Prestamo> prestamos = prestamoService.obtenerPrestamosPorUsuario(\"USR008\");\n+    assertEquals(2, prestamos.size());\n+    assertTrue(prestamos.stream().allMatch(p -> p.getUsuarioId().equals(\"USR008\")));\n+}\n+\n+@Test\n+void obtenerPrestamosActivosTest() {\n+    Date hoy = new Date();\n+    Calendar futuro = Calendar.getInstance();\n+    futuro.add(Calendar.DAY_OF_MONTH, 10);\n+\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE011\", \"LIB-011\", \"USR009\", getFecha(\"2024-04-10\"), getFecha(\"2024-04-15\")));\n+    prestamoService.crearPrestamo(new Prestamo(\"PRE012\", \"LIB-012\", \"USR009\", getFecha(\"2024-04-20\"), futuro.getTime()));\n+\n+    List<Prestamo> activos = prestamoService.obtenerPrestamosActivos();\n+    assertTrue(activos.stream().anyMatch(p -> p.getIdPrestamo().equals(\"PRE012\")));\n+    assertTrue(activos.stream().noneMatch(p -> p.getIdPrestamo().equals(\"PRE011\")));\n+}\n+\n+\n     \n }\n"
                }
            ],
            "date": 1745913373256,
            "name": "Commit-0",
            "content": "package es.ies.puerto.modelo.db.services;\n\npublic class PrestamoServiceTest {\n\n}\n"
        }
    ]
}