{
    "sourceFile": "src/test/java/es/ies/puerto/modelo/db/services/LibroServiceTest.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1745910956635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745910962096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n \n class AutorServiceTest extends UtilidadesTest{\n-    private Li autorService;\n+    private LibroService li;\n \n     @BeforeEach\n     void setUp()  {\n         autorService = new AutorService();\n"
                },
                {
                    "date": 1745910971302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n \n class AutorServiceTest extends UtilidadesTest{\n-    private LibroService li;\n+    private LibroService libroService;\n \n     @BeforeEach\n     void setUp()  {\n-        autorService = new AutorService();\n+        libroService = new LibroService();\n     }\n \n     @Test\n     void crearAutorTest() {\n"
                },
                {
                    "date": 1745911055318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,66 +22,10 @@\n     void setUp()  {\n         libroService = new LibroService();\n     }\n \n-    @Test\n-    void crearAutorTest() {\n-        Autor autor = new Autor(\"123\", \"Test Autor\", \"España\", getFecha(\"2000-01-01\"));\n-        assertTrue(autorService.crearAutor(autor));\n-        assertFalse(autorService.crearAutor(autor));\n-    }\n+    \n \n-    @Test\n-    void obtenerTodosAutoresTest() {\n-        assertEquals(4, autorService.obtenerTodosAutores().size());\n-        \n-        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", new Date()));\n-        autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n-        \n-        List<Autor> autores = autorService.obtenerTodosAutores();\n-        assertEquals(6, autores.size());\n-    }\n-\n-    @Test\n-    void testObtenerAutorPorDni() {\n-        Autor expected = new Autor(\"111\", \"Test\", \"Alemania\", getFecha(\"1990-05-05\"));\n-        autorService.crearAutor(expected);\n-        \n-        Autor actual = autorService.obtenerAutorPorDni(\"111\");\n-        assertNotNull(actual);\n-        assertEquals(expected.getDni(), actual.getDni());\n-        \n-        assertNull(autorService.obtenerAutorPorDni(\"999\"));\n-    }\n-\n-    @Test\n-    void testActualizarAutor() {\n-        Autor autor = new Autor(\"222\", \"Original\", \"Portugal\", null);\n-        autorService.crearAutor(autor);\n-        \n-        autor.setNombre(\"Actualizado\");\n-        autor.setNacionalidad(\"Brasil\");\n-        assertTrue(autorService.actualizarAutor(autor));\n-        \n-        Autor updated = autorService.obtenerAutorPorDni(\"222\");\n-        assertEquals(\"Actualizado\", updated.getNombre());\n-        assertEquals(\"Brasil\", updated.getNacionalidad());\n-    }\n-\n-    @Test\n-    void testEliminarAutor()  {\n-        try {\n-            autorService.crearAutor(new Autor(\"333\", \"Eliminar\", \"Grecia\", null));\n-            assertTrue(autorService.eliminarAutor(\"333\"));\n-            assertNull(autorService.obtenerAutorPorDni(\"333\"));\n-            \n-            assertFalse(autorService.eliminarAutor(\"12345678A\"));\n-        } catch (Exception e) {\n-            Assertions.fail(\"No se ha obtenido el resultado esperado\");\n-        }\n-\n-    }\n-\n     @AfterEach\n     public void tearDown() throws SQLException {\n        \n         File originalDB = new File(\"src/main/resources/biblioteca.db\");\n"
                },
                {
                    "date": 1745911061067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,42 +24,8 @@\n     }\n \n     \n \n-    @AfterEach\n-    public void tearDown() throws SQLException {\n-       \n-        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n-        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n-        \n-        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n-        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n-        System.out.println(\"Backup existe? \" + backupDB.exists());\n     \n-\n-        if (!backupDB.exists()) {\n-            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n-        }\n     \n \n-        if (originalDB.exists()) {\n-            boolean deleted = originalDB.delete();\n-            if (!deleted) {\n-                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n-            }\n-        }\n-    \n-        try {\n-            Files.copy(\n-                backupDB.toPath(),\n-                originalDB.toPath(),\n-                StandardCopyOption.REPLACE_EXISTING\n-            );\n-            System.out.println(\"Base de datos restaurada exitosamente\");\n-        } catch (IOException e) {\n-            throw new SQLException(\"Error copiando el backup\", e);\n-        }\n-    }\n-\n-    \n-\n }\n"
                },
                {
                    "date": 1745911102563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import java.util.Date;\n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n \n-class AutorServiceTest extends UtilidadesTest{\n+class LibroServiceTest extends UtilidadesTest{\n     private LibroService libroService;\n \n     @BeforeEach\n     void setUp()  {\n"
                },
                {
                    "date": 1745911224239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,17 @@\n import org.junit.jupiter.api.*;\n \n import es.ies.puerto.UtilidadesTest;\n import es.ies.puerto.modelo.db.entidades.Autor;\n+import es.ies.puerto.modelo.db.entidades.Libro;\n \n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.StandardCopyOption;\n import java.sql.*;\n-\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n \n@@ -22,10 +24,83 @@\n     void setUp()  {\n         libroService = new LibroService();\n     }\n \n-    \n+    class LibroServiceTest {\n \n+    LibroService libroService = new LibroService();\n+\n+    Date getFecha(String fecha) {\n+        try {\n+            return new SimpleDateFormat(\"yyyy-MM-dd\").parse(fecha);\n+        } catch (ParseException e) {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    void crearLibroTest() {\n+        Libro libro = new Libro();\n+        libro.setIdLibro(\"TEST-001\");\n+        libro.setTitulo(\"Libro de prueba\");\n+        libro.setAutorDni(\"12345678A\");\n+        libro.setFechaPublicacion(getFecha(\"2020-01-01\"));\n+        libro.setGenero(\"Prueba\");\n+\n+        assertTrue(libroService.crearLibro(libro));\n+        assertFalse(libroService.crearLibro(libro)); // Intento de insertar duplicado\n+    }\n+\n+    @Test\n+    void obtenerTodosLibrosTest() {\n+        int cantidadInicial = libroService.obtenerTodosLibros().size();\n+\n+        libroService.crearLibro(new Libro(\"TEST-002\", \"Libro 1\", \"12345678A\", getFecha(\"2022-05-05\"), \"Novela\"));\n+        libroService.crearLibro(new Libro(\"TEST-003\", \"Libro 2\", \"98765432B\", getFecha(\"2022-06-06\"), \"Fantasía\"));\n+\n+        List<Libro> libros = libroService.obtenerTodosLibros();\n+        assertEquals(cantidadInicial + 2, libros.size());\n+    }\n+\n+    @Test\n+    void testObtenerLibroPorId() {\n+        Libro expected = new Libro(\"TEST-004\", \"Buscar Libro\", \"11222333C\", getFecha(\"2023-01-01\"), \"Drama\");\n+        libroService.crearLibro(expected);\n+\n+        Libro actual = libroService.obtenerLibroPorId(\"TEST-004\");\n+        assertNotNull(actual);\n+        assertEquals(expected.getIdLibro(), actual.getIdLibro());\n+\n+        assertNull(libroService.obtenerLibroPorId(\"NO-EXISTE\"));\n+    }\n+\n+    @Test\n+    void testActualizarLibro() {\n+        Libro libro = new Libro(\"TEST-005\", \"Original\", \"44555666D\", getFecha(\"2010-01-01\"), \"Acción\");\n+        libroService.crearLibro(libro);\n+\n+        libro.setTitulo(\"Actualizado\");\n+        libro.setGenero(\"Terror\");\n+        assertTrue(libroService.actualizarLibro(libro));\n+\n+        Libro updated = libroService.obtenerLibroPorId(\"TEST-005\");\n+        assertEquals(\"Actualizado\", updated.getTitulo());\n+        assertEquals(\"Terror\", updated.getGenero());\n+    }\n+\n+    @Test\n+    void testEliminarLibro() {\n+        try {\n+            libroService.crearLibro(new Libro(\"TEST-006\", \"Eliminar\", \"12345678A\", getFecha(\"2000-12-12\"), \"Suspenso\"));\n+            assertTrue(libroService.eliminarLibro(\"TEST-006\"));\n+            assertNull(libroService.obtenerLibroPorId(\"TEST-006\"));\n+\n+            assertFalse(libroService.eliminarLibro(\"NO-EXISTE\"));\n+        } catch (Exception e) {\n+            Assertions.fail(\"No se ha obtenido el resultado esperado\");\n+        }\n+    }\n+\n     \n     \n \n }\n"
                },
                {
                    "date": 1745911244455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,20 +24,10 @@\n     void setUp()  {\n         libroService = new LibroService();\n     }\n \n-    class LibroServiceTest {\n \n-    LibroService libroService = new LibroService();\n \n-    Date getFecha(String fecha) {\n-        try {\n-            return new SimpleDateFormat(\"yyyy-MM-dd\").parse(fecha);\n-        } catch (ParseException e) {\n-            return null;\n-        }\n-    }\n-\n     @Test\n     void crearLibroTest() {\n         Libro libro = new Libro();\n         libro.setIdLibro(\"TEST-001\");\n"
                },
                {
                    "date": 1745911252153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,8 @@\n import es.ies.puerto.UtilidadesTest;\n import es.ies.puerto.modelo.db.entidades.Autor;\n import es.ies.puerto.modelo.db.entidades.Libro;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.StandardCopyOption;\n-import java.sql.*;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n \n class LibroServiceTest extends UtilidadesTest{\n@@ -24,10 +16,8 @@\n     void setUp()  {\n         libroService = new LibroService();\n     }\n \n-\n-\n     @Test\n     void crearLibroTest() {\n         Libro libro = new Libro();\n         libro.setIdLibro(\"TEST-001\");\n"
                },
                {
                    "date": 1745911313950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n import org.junit.jupiter.api.*;\n \n import es.ies.puerto.UtilidadesTest;\n-import es.ies.puerto.modelo.db.entidades.Autor;\n import es.ies.puerto.modelo.db.entidades.Libro;\n \n import java.util.List;\n import static org.junit.jupiter.api.Assertions.*;\n@@ -26,9 +25,9 @@\n         libro.setFechaPublicacion(getFecha(\"2020-01-01\"));\n         libro.setGenero(\"Prueba\");\n \n         assertTrue(libroService.crearLibro(libro));\n-        assertFalse(libroService.crearLibro(libro)); // Intento de insertar duplicado\n+        assertFalse(libroService.crearLibro(libro)); \n     }\n \n     @Test\n     void obtenerTodosLibrosTest() {\n"
                }
            ],
            "date": 1745910956635,
            "name": "Commit-0",
            "content": "package es.ies.puerto.modelo.db.services;\n\nimport org.junit.jupiter.api.*;\n\nimport es.ies.puerto.UtilidadesTest;\nimport es.ies.puerto.modelo.db.entidades.Autor;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\nimport java.sql.*;\n\nimport java.util.Date;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AutorServiceTest extends UtilidadesTest{\n    private Li autorService;\n\n    @BeforeEach\n    void setUp()  {\n        autorService = new AutorService();\n    }\n\n    @Test\n    void crearAutorTest() {\n        Autor autor = new Autor(\"123\", \"Test Autor\", \"España\", getFecha(\"2000-01-01\"));\n        assertTrue(autorService.crearAutor(autor));\n        assertFalse(autorService.crearAutor(autor));\n    }\n\n    @Test\n    void obtenerTodosAutoresTest() {\n        assertEquals(4, autorService.obtenerTodosAutores().size());\n        \n        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", new Date()));\n        autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n        \n        List<Autor> autores = autorService.obtenerTodosAutores();\n        assertEquals(6, autores.size());\n    }\n\n    @Test\n    void testObtenerAutorPorDni() {\n        Autor expected = new Autor(\"111\", \"Test\", \"Alemania\", getFecha(\"1990-05-05\"));\n        autorService.crearAutor(expected);\n        \n        Autor actual = autorService.obtenerAutorPorDni(\"111\");\n        assertNotNull(actual);\n        assertEquals(expected.getDni(), actual.getDni());\n        \n        assertNull(autorService.obtenerAutorPorDni(\"999\"));\n    }\n\n    @Test\n    void testActualizarAutor() {\n        Autor autor = new Autor(\"222\", \"Original\", \"Portugal\", null);\n        autorService.crearAutor(autor);\n        \n        autor.setNombre(\"Actualizado\");\n        autor.setNacionalidad(\"Brasil\");\n        assertTrue(autorService.actualizarAutor(autor));\n        \n        Autor updated = autorService.obtenerAutorPorDni(\"222\");\n        assertEquals(\"Actualizado\", updated.getNombre());\n        assertEquals(\"Brasil\", updated.getNacionalidad());\n    }\n\n    @Test\n    void testEliminarAutor()  {\n        try {\n            autorService.crearAutor(new Autor(\"333\", \"Eliminar\", \"Grecia\", null));\n            assertTrue(autorService.eliminarAutor(\"333\"));\n            assertNull(autorService.obtenerAutorPorDni(\"333\"));\n            \n            assertFalse(autorService.eliminarAutor(\"12345678A\"));\n        } catch (Exception e) {\n            Assertions.fail(\"No se ha obtenido el resultado esperado\");\n        }\n\n    }\n\n    @AfterEach\n    public void tearDown() throws SQLException {\n       \n        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n        \n        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n        System.out.println(\"Backup existe? \" + backupDB.exists());\n    \n\n        if (!backupDB.exists()) {\n            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n        }\n    \n\n        if (originalDB.exists()) {\n            boolean deleted = originalDB.delete();\n            if (!deleted) {\n                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n            }\n        }\n    \n        try {\n            Files.copy(\n                backupDB.toPath(),\n                originalDB.toPath(),\n                StandardCopyOption.REPLACE_EXISTING\n            );\n            System.out.println(\"Base de datos restaurada exitosamente\");\n        } catch (IOException e) {\n            throw new SQLException(\"Error copiando el backup\", e);\n        }\n    }\n\n    \n\n}\n"
        }
    ]
}