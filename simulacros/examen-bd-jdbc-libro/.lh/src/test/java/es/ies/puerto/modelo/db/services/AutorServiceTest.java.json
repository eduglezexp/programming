{
    "sourceFile": "src/test/java/es/ies/puerto/modelo/db/services/AutorServiceTest.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1745909777336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745909785665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     @Test\n     void obtenerTodosAutoresTest() {\n         assertEquals(4, autorService.obtenerTodosAutores().size());\n         \n-        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", nunew Date()ll));\n+        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", new Date()));\n         autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n         \n         List<Autor> autores = autorService.obtenerTodosAutores();\n         assertEquals(6, autores.size());\n"
                },
                {
                    "date": 1745909799857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     @Test\n     void obtenerTodosAutoresTest() {\n         assertEquals(4, autorService.obtenerTodosAutores().size());\n         \n-        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", new Date()));\n+        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", null));\n         autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n         \n         List<Autor> autores = autorService.obtenerTodosAutores();\n         assertEquals(6, autores.size());\n"
                },
                {
                    "date": 1745909819594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     @Test\n     void obtenerTodosAutoresTest() {\n         assertEquals(4, autorService.obtenerTodosAutores().size());\n         \n-        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", null));\n+        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", new Date()));\n         autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n         \n         List<Autor> autores = autorService.obtenerTodosAutores();\n         assertEquals(6, autores.size());\n"
                },
                {
                    "date": 1745910526259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,18 +82,9 @@\n     }\n \n     @AfterEach\n     public void tearDown() throws SQLException {\n-        /**\n-        try {\n-            if (autorService.getConnection() != null && !autorService.getConnection().isClosed()) {\n-                autorService.getConnection().close();\n-            }\n-        } catch (SQLException e) {\n-            throw new RuntimeException(\"Error cerrando conexiones\", e);\n-        }\n-         */\n-        // 2. Definir rutas corregidas\n+       \n         File originalDB = new File(\"src/main/resources/biblioteca.db\");\n         File backupDB = new File(\"src/main/backup/biblioteca.db\");  // ← Corregido \"backup\"\n         \n         System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n"
                },
                {
                    "date": 1745910532785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,14 +90,14 @@\n         System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n         System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n         System.out.println(\"Backup existe? \" + backupDB.exists());\n     \n-        // 3. Verificar que el backup existe\n+\n         if (!backupDB.exists()) {\n             throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n         }\n     \n-        // 4. Eliminar el original solo si existe\n+\n         if (originalDB.exists()) {\n             boolean deleted = originalDB.delete();\n             if (!deleted) {\n                 throw new SQLException(\"No se pudo eliminar la base de datos original\");\n"
                },
                {
                    "date": 1745910544910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     @AfterEach\n     public void tearDown() throws SQLException {\n        \n         File originalDB = new File(\"src/main/resources/biblioteca.db\");\n-        File backupDB = new File(\"src/main/backup/biblioteca.db\");  // ← Corregido \"backup\"\n+        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n         \n         System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n         System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n         System.out.println(\"Backup existe? \" + backupDB.exists());\n@@ -103,9 +103,8 @@\n                 throw new SQLException(\"No se pudo eliminar la base de datos original\");\n             }\n         }\n     \n-        // 5. Copiar desde el backup al original\n         try {\n             Files.copy(\n                 backupDB.toPath(),\n                 originalDB.toPath(),\n"
                },
                {
                    "date": 1745911075928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,42 +80,9 @@\n         }\n \n     }\n \n-    @AfterEach\n-    public void tearDown() throws SQLException {\n-       \n-        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n-        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n-        \n-        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n-        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n-        System.out.println(\"Backup existe? \" + backupDB.exists());\n     \n \n-        if (!backupDB.exists()) {\n-            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n-        }\n     \n \n-        if (originalDB.exists()) {\n-            boolean deleted = originalDB.delete();\n-            if (!deleted) {\n-                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n-            }\n-        }\n-    \n-        try {\n-            Files.copy(\n-                backupDB.toPath(),\n-                originalDB.toPath(),\n-                StandardCopyOption.REPLACE_EXISTING\n-            );\n-            System.out.println(\"Base de datos restaurada exitosamente\");\n-        } catch (IOException e) {\n-            throw new SQLException(\"Error copiando el backup\", e);\n-        }\n-    }\n-\n-    \n-\n }\n"
                },
                {
                    "date": 1745915246790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,10 +79,40 @@\n             Assertions.fail(\"No se ha obtenido el resultado esperado\");\n         }\n \n     }\n+    @AfterEach\n+    public void tearDown() throws SQLException {\n+       \n+        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n+        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n+        \n+        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n+        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n+        System.out.println(\"Backup existe? \" + backupDB.exists());\n+    \n \n+        if (!backupDB.exists()) {\n+            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n+        }\n     \n \n+        if (originalDB.exists()) {\n+            boolean deleted = originalDB.delete();\n+            if (!deleted) {\n+                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n+            }\n+        }\n     \n+        try {\n+            Files.copy(\n+                backupDB.toPath(),\n+                originalDB.toPath(),\n+                StandardCopyOption.REPLACE_EXISTING\n+            );\n+            System.out.println(\"Base de datos restaurada exitosamente\");\n+        } catch (IOException e) {\n+            throw new SQLException(\"Error copiando el backup\", e);\n+        }\n+    }\n \n }\n"
                },
                {
                    "date": 1745915269172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,40 +79,7 @@\n             Assertions.fail(\"No se ha obtenido el resultado esperado\");\n         }\n \n     }\n-    @AfterEach\n-    public void tearDown() throws SQLException {\n-       \n-        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n-        File backupDB = new File(\"src/main/backup/biblioteca.db\");  \n-        \n-        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n-        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n-        System.out.println(\"Backup existe? \" + backupDB.exists());\n-    \n \n-        if (!backupDB.exists()) {\n-            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n-        }\n     \n-\n-        if (originalDB.exists()) {\n-            boolean deleted = originalDB.delete();\n-            if (!deleted) {\n-                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n-            }\n-        }\n-    \n-        try {\n-            Files.copy(\n-                backupDB.toPath(),\n-                originalDB.toPath(),\n-                StandardCopyOption.REPLACE_EXISTING\n-            );\n-            System.out.println(\"Base de datos restaurada exitosamente\");\n-        } catch (IOException e) {\n-            throw new SQLException(\"Error copiando el backup\", e);\n-        }\n-    }\n-\n }\n"
                }
            ],
            "date": 1745909777336,
            "name": "Commit-0",
            "content": "package es.ies.puerto.modelo.db.services;\n\nimport org.junit.jupiter.api.*;\n\nimport es.ies.puerto.UtilidadesTest;\nimport es.ies.puerto.modelo.db.entidades.Autor;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\nimport java.sql.*;\n\nimport java.util.Date;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AutorServiceTest extends UtilidadesTest{\n    private AutorService autorService;\n\n    @BeforeEach\n    void setUp()  {\n        autorService = new AutorService();\n    }\n\n    @Test\n    void crearAutorTest() {\n        Autor autor = new Autor(\"123\", \"Test Autor\", \"España\", getFecha(\"2000-01-01\"));\n        assertTrue(autorService.crearAutor(autor));\n        assertFalse(autorService.crearAutor(autor));\n    }\n\n    @Test\n    void obtenerTodosAutoresTest() {\n        assertEquals(4, autorService.obtenerTodosAutores().size());\n        \n        autorService.crearAutor(new Autor(\"456\", \"Autor 1\", \"Francia\", nunew Date()ll));\n        autorService.crearAutor(new Autor(\"789\", \"Autor 2\", \"Italia\", new Date()));\n        \n        List<Autor> autores = autorService.obtenerTodosAutores();\n        assertEquals(6, autores.size());\n    }\n\n    @Test\n    void testObtenerAutorPorDni() {\n        Autor expected = new Autor(\"111\", \"Test\", \"Alemania\", getFecha(\"1990-05-05\"));\n        autorService.crearAutor(expected);\n        \n        Autor actual = autorService.obtenerAutorPorDni(\"111\");\n        assertNotNull(actual);\n        assertEquals(expected.getDni(), actual.getDni());\n        \n        assertNull(autorService.obtenerAutorPorDni(\"999\"));\n    }\n\n    @Test\n    void testActualizarAutor() {\n        Autor autor = new Autor(\"222\", \"Original\", \"Portugal\", null);\n        autorService.crearAutor(autor);\n        \n        autor.setNombre(\"Actualizado\");\n        autor.setNacionalidad(\"Brasil\");\n        assertTrue(autorService.actualizarAutor(autor));\n        \n        Autor updated = autorService.obtenerAutorPorDni(\"222\");\n        assertEquals(\"Actualizado\", updated.getNombre());\n        assertEquals(\"Brasil\", updated.getNacionalidad());\n    }\n\n    @Test\n    void testEliminarAutor()  {\n        try {\n            autorService.crearAutor(new Autor(\"333\", \"Eliminar\", \"Grecia\", null));\n            assertTrue(autorService.eliminarAutor(\"333\"));\n            assertNull(autorService.obtenerAutorPorDni(\"333\"));\n            \n            assertFalse(autorService.eliminarAutor(\"12345678A\"));\n        } catch (Exception e) {\n            Assertions.fail(\"No se ha obtenido el resultado esperado\");\n        }\n\n    }\n\n    @AfterEach\n    public void tearDown() throws SQLException {\n        /**\n        try {\n            if (autorService.getConnection() != null && !autorService.getConnection().isClosed()) {\n                autorService.getConnection().close();\n            }\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Error cerrando conexiones\", e);\n        }\n         */\n        // 2. Definir rutas corregidas\n        File originalDB = new File(\"src/main/resources/biblioteca.db\");\n        File backupDB = new File(\"src/main/backup/biblioteca.db\");  // ← Corregido \"backup\"\n        \n        System.out.println(\"Path original: \" + originalDB.getAbsolutePath());\n        System.out.println(\"Path backup: \" + backupDB.getAbsolutePath());\n        System.out.println(\"Backup existe? \" + backupDB.exists());\n    \n        // 3. Verificar que el backup existe\n        if (!backupDB.exists()) {\n            throw new SQLException(\"El archivo de backup no existe en: \" + backupDB.getAbsolutePath());\n        }\n    \n        // 4. Eliminar el original solo si existe\n        if (originalDB.exists()) {\n            boolean deleted = originalDB.delete();\n            if (!deleted) {\n                throw new SQLException(\"No se pudo eliminar la base de datos original\");\n            }\n        }\n    \n        // 5. Copiar desde el backup al original\n        try {\n            Files.copy(\n                backupDB.toPath(),\n                originalDB.toPath(),\n                StandardCopyOption.REPLACE_EXISTING\n            );\n            System.out.println(\"Base de datos restaurada exitosamente\");\n        } catch (IOException e) {\n            throw new SQLException(\"Error copiando el backup\", e);\n        }\n    }\n\n    \n\n}\n"
        }
    ]
}