{
    "sourceFile": "src/main/java/es/ies/puerto/modelo/db/services/AutorService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1745914575020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745914633696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n"
                },
                {
                    "date": 1745914642410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n \n import es.ies.puerto.abstractas.DBConnection;\n import es.ies.puerto.modelo.db.entidades.Autor;\n"
                }
            ],
            "date": 1745914575020,
            "name": "Commit-0",
            "content": "package es.ies.puerto.modelo.db.services;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport es.ies.puerto.abstractas.DBConnection;\nimport es.ies.puerto.modelo.db.entidades.Autor;\n\n\npublic class AutorService extends DBConnection {\n\n    public boolean crearAutor(Autor autor) {\n        String sql = \"INSERT INTO autores (dni, nombre, nacionalidad, fecha_nacimiento) VALUES (?, ?, ?, ?)\";\n        Connection conn = null;\n        try {\n            conn = getConnection();\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, autor.getDni());\n            pstmt.setString(2, autor.getNombre());\n            pstmt.setString(3, autor.getNacionalidad());\n            pstmt.setString(4, autor.getFechaNacimiento() != null ? getSdf().format(autor.getFechaNacimiento()) : null);\n            return pstmt.executeUpdate() > 0;\n        } catch (Exception e) {\n           e.printStackTrace();\n           return false;\n        } finally {\n            cerrarConnection(conn);\n        }     \n            \n    }\n\n    public List<Autor> obtenerTodosAutores() {\n        List<Autor> autores = new ArrayList<>();\n        String sql = \"SELECT * FROM autores\";\n        Connection conn = null;\n        try {\n            conn = getConnection();\n             Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(sql);\n            \n            while (rs.next()) {\n                autores.add(new Autor(rs));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            cerrarConnection(conn);\n        }\n        return autores;\n    }\n\n    public Autor obtenerAutorPorDni(String dni) {\n        String sql = \"SELECT * FROM autores WHERE dni = ?\";\n        Autor autor = null;\n        Connection conn = null;\n        try {\n            conn = getConnection();\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n            \n            pstmt.setString(1, dni);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                if (rs.next()) {\n                    autor = new Autor(rs);\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            cerrarConnection(conn);\n        }\n        return autor;\n    }\n\n    public boolean actualizarAutor(Autor autor) {\n        String sql = \"UPDATE autores SET nombre = ?, nacionalidad = ?, fecha_nacimiento = ? WHERE dni = ?\";\n        Connection conn = null;\n        try {\n            conn = getConnection();\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            \n            pstmt.setString(1, autor.getNombre());\n            pstmt.setString(2, autor.getNacionalidad());\n            pstmt.setString(3, autor.getFechaNacimiento() != null ? getSdf().format(autor.getFechaNacimiento()) : null);\n            pstmt.setString(4, autor.getDni());\n            \n            return pstmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            cerrarConnection(conn);\n        }\n    }\n\n    public boolean eliminarAutor(String dni) {\n        String sql = \"DELETE FROM autores WHERE dni = ? AND NOT EXISTS (SELECT 1 FROM libros WHERE autor_dni = ?)\";\n        Connection conn = null;\n        try {\n            conn = getConnection();\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            \n            pstmt.setString(1, dni);\n            pstmt.setString(2, dni);\n            return pstmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            cerrarConnection(conn);\n        }\n    }\n}\n"
        }
    ]
}